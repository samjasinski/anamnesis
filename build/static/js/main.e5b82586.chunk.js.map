{"version":3,"sources":["components/Thought/ThoughtBubble.jsx","components/Thought/ThoughtCloud.jsx","components/General/Button.jsx","components/General/Input.jsx","components/General/Label.jsx","components/General/Form.jsx","components/TaskBar/GroupViewTaskBar.jsx","components/App.jsx","index.js"],"names":["ThoughtBubble","props","_useState","useState","_useState2","_slicedToArray","thought","setThought","React","createElement","onSubmit","event","prevState","addCloud","preventDefault","placeholder","className","type","value","onChange","target","ThoughtCloud","id","style","thoughtText","Button","onClick","icon","Input","Label","htmlFor","for","text","Form","wrapperStyle","height","width","backgroundColor","zIndex","position","addIcon","FontAwesomeIcon","faPlusCircle","size","closeIcon","faXmark","hidden","formClassName","handleSubmit","GroupViewTaskBar","iconUp","faChevronUp","fade","animationDuration","iconDown","faChevronDown","opacity","iconAdd","faPlus","color","visibility","setVisibility","_useState3","_useState4","hideForm","setHideForm","toggleFormVisibility","bottom","animationName","setStyle","App","thoughtClouds","setThoughtClouds","newThought","concat","_toConsumableArray","display","placeItems","boxShadow","borderRadius","background","margin","animationIterationCount","Math","floor","random","animationTimingFunction","map","cloud","index","displayText","length","slice","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.e5b82586.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction ThoughtBubble(props) {\r\n  const [thought, setThought] = useState(\"\");\r\n\r\n  function handleSubmit(event) {\r\n    setThought(prevState =>{\r\n      props.addCloud(prevState) \r\n    });\r\n    event.preventDefault();\r\n    setThought(\"\")\r\n  }\r\n\r\n  function handleChange(event) {\r\n    setThought(event.target.value);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit}>\r\n          <input\r\n            placeholder=\"\"\r\n            className=\"thought-input\"\r\n            type=\"text\"\r\n            value={thought}\r\n            onChange={handleChange}\r\n          />\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ThoughtBubble;\r\n","import React from \"react\";\r\n\r\nfunction ThoughtCloud (props) {\r\n    return (\r\n        \r\n        <div className=\"thought-cloud\" id={props.id} style={props.style}>{props.thoughtText}</div>\r\n        \r\n    )\r\n}\r\n\r\nexport default ThoughtCloud;","import React, {useState} from \"react\";\r\n\r\nfunction Button (props) {\r\n    return(\r\n        <button onClick={props.onClick} className={props.className}>\r\n            {props.icon}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Button;","import React from \"react\";\r\n\r\nfunction Input (props) {\r\n    return (\r\n        <input \r\n        type={props.type} \r\n        placeholder={props.placeholder} \r\n        className={props.className}\r\n        id={props.id}   \r\n        \r\n        />\r\n    )\r\n}\r\n\r\nexport default Input","import React from \"react\";\r\n\r\nfunction Label(props) {\r\n    return(\r\n        <label htmlFor={props.for} className={props.className}>{props.text}</label>\r\n    )\r\n}\r\n\r\nexport default Label","import React from \"react\";\r\nimport Input from \"./Input\"\r\nimport Label from \"./Label\"\r\nimport Button from \"./Button\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCross, faPlusCircle, faXmark } from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction Form (props) {\r\n    \r\n    const wrapperStyle = {\r\n        height: \"100%\",\r\n        width: \"100%\",\r\n        backgroundColor: \"rgba(163, 161, 161, 0.7)\",\r\n        zIndex: \"10\",\r\n        position: \"fixed\"\r\n    }\r\n\r\n    const addIcon = <FontAwesomeIcon icon={faPlusCircle} size=\"4x\"/>;\r\n    const closeIcon = <FontAwesomeIcon icon={faXmark} size=\"3x\"/>;\r\n\r\n    wrapperStyle[\"display\"] = props.hidden;\r\n    \r\n    return (\r\n        <div style={wrapperStyle}>\r\n\r\n            <form className={props.formClassName}>\r\n\r\n            <Button \r\n                onClick={props.handleSubmit}\r\n                className=\"group-form-close-btn\" \r\n                icon={closeIcon} />\r\n                \r\n                <Label \r\n                htmlFor=\"groupNameInput\"\r\n                text=\"Group Name\"\r\n                className=\"group-form-label\"\r\n                />\r\n\r\n                <Input \r\n                id=\"groupNameInput\"\r\n                type=\"text\" \r\n                placeholder=\"Your new group name goes here!\"\r\n                className=\"form-input\"   \r\n                />\r\n\r\n                <Label \r\n                htmlFor=\"groupColourPicker\"\r\n                text=\"Colour\"\r\n                className=\"group-form-label\"\r\n                />\r\n\r\n                <Input \r\n                id=\"groupColourPicker\"\r\n                type=\"color\" \r\n                placeholder=\"Your new group name goes here!\"\r\n                className=\"form-input\"\r\n                value=\"#B0DAFF\"   \r\n                />\r\n\r\n                <Button \r\n                onClick={props.handleSubmit}\r\n                className=\"group-form-btn\" \r\n                icon={addIcon} />\r\n\r\n            </form>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Form","import React, {useState} from \"react\";\r\nimport Button from \"../General/Button\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faChevronUp, faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { faChevronDown } from '@fortawesome/free-solid-svg-icons';\r\nimport Form from \"../General/Form\";\r\nimport Group from \"./Group\";\r\n\r\nfunction GroupViewTaskBar () {\r\n\r\n    const iconUp = <FontAwesomeIcon icon={faChevronUp} fade size=\"3x\" style={{animationDuration: \"2.5s\"}}/>;\r\n    const iconDown = <FontAwesomeIcon icon={faChevronDown} size=\"3x\" style={{opacity: \"0.5\"}}/>;\r\n\r\n    const iconAdd = <FontAwesomeIcon icon={faPlus} size=\"2xl\" style={{color: \"whitesmoke\"}}/>;\r\n\r\n    const [visibility, setVisibility] = useState(null);\r\n\r\n    function toggleVisibility () {\r\n        \r\n        setVisibility(!visibility)\r\n    }\r\n\r\n    function setStyle () {\r\n        if (visibility === null) {\r\n            return \r\n        } else if (visibility === true) {\r\n            return {\r\n                bottom: \"0px\",\r\n                animationName: \"taskbarUp\",\r\n            } \r\n        } else if (visibility === false) {\r\n            return {\r\n                bottom: \"-100px\",\r\n                animationName: \"taskbarDown\",\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    const [hideForm, setHideForm] = useState(\"none\");\r\n\r\n    function toggleFormVisibility () {\r\n        if (hideForm === \"none\") {\r\n            setHideForm(\"\")\r\n        } else {\r\n            setHideForm(\"none\")\r\n        }\r\n    }\r\n\r\n    function addGroup () {\r\n        toggleFormVisibility()\r\n    }\r\n\r\n    function handleSubmit (event) {\r\n        event.preventDefault()\r\n        toggleFormVisibility()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n        <Form formClassName=\"new-group-form\" hidden={hideForm} handleSubmit={handleSubmit}/>\r\n        \r\n        <div className=\"group-view-task-bar\" style={setStyle()}>\r\n            <Button onClick={toggleVisibility} className=\"task-bar-toggle-btn\" icon={!visibility ? iconUp : iconDown}/>\r\n            <Button onClick={addGroup} className=\"group-add-button\" icon={iconAdd}/>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GroupViewTaskBar;","import React, {useState} from \"react\";\r\nimport ThoughtBubble from \"./Thought/ThoughtBubble.jsx\";\r\nimport ThoughtCloud from \"./Thought/ThoughtCloud.jsx\";\r\nimport GroupViewTaskBar from \"./TaskBar/GroupViewTaskBar.jsx\";\r\nimport Form from \"./General/Form.jsx\";\r\n// import \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n  const [thoughtClouds, setThoughtClouds] = useState([]);\r\n\r\n  function generateThoughtCloudCss () {\r\n\r\n    var inlineStyle = {\r\n      display: \"grid\",\r\n      placeItems: \"center\",\r\n      position: \"relative\",\r\n      width:\"350px\",\r\n      height:\"130px\",\r\n      boxShadow: \"10px 10px rgba(0,0,0,0.2)\",\r\n      borderRadius: \"100px\",\r\n      background:\"whitesmoke\",\r\n      margin: \"50px\",\r\n      animationName: \"floatLeftToRight\",\r\n      animationIterationCount: \"infinite\",\r\n      animationDuration: Math.floor((Math.random() * 10) + 5) + \"s\",\r\n      animationTimingFunction: \"cubic-bezier(0, 0.74, 1, 0.4)\"\r\n    }\r\n    \r\n    return inlineStyle\r\n  }\r\n\r\n  function addCloud (newThought) {\r\n    setThoughtClouds([\r\n      ...thoughtClouds, \r\n      {\r\n        thought: newThought, \r\n        style: generateThoughtCloudCss()\r\n      }\r\n    ])\r\n  }\r\n\r\n\r\n\r\n  return (\r\n   <div>\r\n  \r\n\r\n  <ThoughtBubble addCloud={addCloud} />\r\n\r\n  <div className=\"grid-wrapper\">\r\n  \r\n  {\r\n    thoughtClouds.map((cloud, index) => {\r\n      const displayText = cloud.thought.length >= 123 ? cloud.thought.slice(0, 117) + \" . . .\" : cloud.thought; \r\n    return ( \r\n      <ThoughtCloud id={index} style={cloud.style} thoughtText={displayText}/> \r\n    )\r\n  })}\r\n  </div>\r\n\r\n  <GroupViewTaskBar />\r\n\r\n \r\n\r\n  </div> \r\n  )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport App from './components/App';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\n\r\nroot.render(\r\n    <App />\r\n);\r\n\r\n"],"sourceRoot":""}